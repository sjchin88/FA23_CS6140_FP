{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3be4020f-d7c0-40cb-9ef9-af2e7bf331c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>stock_id</th>\n",
       "      <th>date_id</th>\n",
       "      <th>seconds_in_bucket</th>\n",
       "      <th>imbalance_size</th>\n",
       "      <th>imbalance_buy_sell_flag</th>\n",
       "      <th>reference_price</th>\n",
       "      <th>matched_size</th>\n",
       "      <th>far_price</th>\n",
       "      <th>near_price</th>\n",
       "      <th>bid_price</th>\n",
       "      <th>bid_size</th>\n",
       "      <th>ask_price</th>\n",
       "      <th>ask_size</th>\n",
       "      <th>wap</th>\n",
       "      <th>target</th>\n",
       "      <th>time_id</th>\n",
       "      <th>row_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3180602.69</td>\n",
       "      <td>1</td>\n",
       "      <td>0.999812</td>\n",
       "      <td>13380276.64</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.999812</td>\n",
       "      <td>60651.50</td>\n",
       "      <td>1.000026</td>\n",
       "      <td>8493.03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-3.029704</td>\n",
       "      <td>0</td>\n",
       "      <td>0_0_0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>166603.91</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.999896</td>\n",
       "      <td>1642214.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.999896</td>\n",
       "      <td>3233.04</td>\n",
       "      <td>1.000660</td>\n",
       "      <td>20605.09</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.519986</td>\n",
       "      <td>0</td>\n",
       "      <td>0_0_1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>302879.87</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.999561</td>\n",
       "      <td>1819368.03</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.999403</td>\n",
       "      <td>37956.00</td>\n",
       "      <td>1.000298</td>\n",
       "      <td>18995.00</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-8.389950</td>\n",
       "      <td>0</td>\n",
       "      <td>0_0_2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11917682.27</td>\n",
       "      <td>-1</td>\n",
       "      <td>1.000171</td>\n",
       "      <td>18389745.62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>2324.90</td>\n",
       "      <td>1.000214</td>\n",
       "      <td>479032.40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-4.010200</td>\n",
       "      <td>0</td>\n",
       "      <td>0_0_3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>447549.96</td>\n",
       "      <td>-1</td>\n",
       "      <td>0.999532</td>\n",
       "      <td>17860614.95</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.999394</td>\n",
       "      <td>16485.54</td>\n",
       "      <td>1.000016</td>\n",
       "      <td>434.10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-7.349849</td>\n",
       "      <td>0</td>\n",
       "      <td>0_0_4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   stock_id  date_id  seconds_in_bucket  imbalance_size  \\\n",
       "0         0        0                  0      3180602.69   \n",
       "1         1        0                  0       166603.91   \n",
       "2         2        0                  0       302879.87   \n",
       "3         3        0                  0     11917682.27   \n",
       "4         4        0                  0       447549.96   \n",
       "\n",
       "   imbalance_buy_sell_flag  reference_price  matched_size  far_price  \\\n",
       "0                        1         0.999812   13380276.64        NaN   \n",
       "1                       -1         0.999896    1642214.25        NaN   \n",
       "2                       -1         0.999561    1819368.03        NaN   \n",
       "3                       -1         1.000171   18389745.62        NaN   \n",
       "4                       -1         0.999532   17860614.95        NaN   \n",
       "\n",
       "   near_price  bid_price  bid_size  ask_price   ask_size  wap    target  \\\n",
       "0         NaN   0.999812  60651.50   1.000026    8493.03  1.0 -3.029704   \n",
       "1         NaN   0.999896   3233.04   1.000660   20605.09  1.0 -5.519986   \n",
       "2         NaN   0.999403  37956.00   1.000298   18995.00  1.0 -8.389950   \n",
       "3         NaN   0.999999   2324.90   1.000214  479032.40  1.0 -4.010200   \n",
       "4         NaN   0.999394  16485.54   1.000016     434.10  1.0 -7.349849   \n",
       "\n",
       "   time_id row_id  \n",
       "0        0  0_0_0  \n",
       "1        0  0_0_1  \n",
       "2        0  0_0_2  \n",
       "3        0  0_0_3  \n",
       "4        0  0_0_4  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('train.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "24679cdf-8857-4e5c-926e-98d12d478cca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Range of the target variable: 831.36023 (Min: -385.2898, Max: 446.07043)\n"
     ]
    }
   ],
   "source": [
    "# Assuming 'Close' is the target variable\n",
    "target = data['target']\n",
    "\n",
    "# Calculating the range of the target variable\n",
    "range_min = target.min()\n",
    "range_max = target.max()\n",
    "target_range = range_max - range_min\n",
    "\n",
    "print(f\"Range of the target variable: {target_range} (Min: {range_min}, Max: {range_max})\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "004e5f38-537c-4db7-9823-5883bb0055af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows: 5237980\n",
      "Number of columns: 17\n"
     ]
    }
   ],
   "source": [
    "# Get the number of rows and columns\n",
    "rows, columns = data.shape\n",
    "\n",
    "print(f\"Number of rows: {rows}\")\n",
    "print(f\"Number of columns: {columns}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7aeb0558-50ea-4bd3-8475-ade40a6e02f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique stock_id count: 200\n",
      "Unique date_id count: 481\n",
      "Unique seconds_in_bucket count: 55\n"
     ]
    }
   ],
   "source": [
    "# Count unique stock_id\n",
    "unique_stock_id_count = data['stock_id'].nunique()\n",
    "\n",
    "# Count unique date_id\n",
    "unique_date_id_count = data['date_id'].nunique()\n",
    "\n",
    "# Count unique seconds_in_bucket\n",
    "unique_seconds_in_bucket_count = data['seconds_in_bucket'].nunique()\n",
    "\n",
    "print(f\"Unique stock_id count: {unique_stock_id_count}\")\n",
    "print(f\"Unique date_id count: {unique_date_id_count}\")\n",
    "print(f\"Unique seconds_in_bucket count: {unique_seconds_in_bucket_count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "a92492e6-3bce-4bb0-a41d-498f57f9649d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows: 2343638\n",
      "Number of columns: 17\n"
     ]
    }
   ],
   "source": [
    "data = data.dropna()\n",
    "\n",
    "rows, columns = data.shape\n",
    "\n",
    "print(f\"Number of rows: {rows}\")\n",
    "print(f\"Number of columns: {columns}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1f06bbbd-e3b4-49db-8bf1-49ec9f473d1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unique stock_id count: 200\n",
      "Unique date_id count: 481\n",
      "Unique seconds_in_bucket count: 25\n"
     ]
    }
   ],
   "source": [
    "# Count unique stock_id\n",
    "unique_stock_id_count = data['stock_id'].nunique()\n",
    "\n",
    "# Count unique date_id\n",
    "unique_date_id_count = data['date_id'].nunique()\n",
    "\n",
    "# Count unique seconds_in_bucket\n",
    "unique_seconds_in_bucket_count = data['seconds_in_bucket'].nunique()\n",
    "\n",
    "print(f\"Unique stock_id count: {unique_stock_id_count}\")\n",
    "print(f\"Unique date_id count: {unique_date_id_count}\")\n",
    "print(f\"Unique seconds_in_bucket count: {unique_seconds_in_bucket_count}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6441bb52-1698-44d4-a2fa-9aef39dd9c7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pearson_correlation: {'imbalance_size': 0.0010597508079042894, 'reference_price': -0.04473762032423138, 'matched_size': 0.0006216808516379594, 'far_price': -0.0018037281170692225, 'near_price': -0.002115035448593967, 'bid_price': -0.04775542189749235, 'bid_size': -0.017739631092372504, 'ask_price': -0.04838886498913048, 'ask_size': 0.012752139801386852, 'wap': -0.056194051943220885}\n",
      "spearman_correlation: {'imbalance_size': 0.0010833034541324852, 'reference_price': -0.03203920862358736, 'matched_size': 0.0017232624948999111, 'far_price': -0.005374061289319017, 'near_price': -0.007609943577612957, 'bid_price': -0.03414298133949177, 'bid_size': -0.05963073825519416, 'ask_price': -0.03501851042029415, 'ask_size': 0.057489574839903836, 'wap': -0.04282104755286715}\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from scipy.stats import pearsonr, spearmanr\n",
    "\n",
    "df = data\n",
    "# 筛选出浮点数(float)类型的列\n",
    "float_columns = df.select_dtypes(include=['float']).columns\n",
    "\n",
    "# 修改后的相关性函数，只针对浮点数列\n",
    "def pearson_correlation(df, target_column, float_columns):\n",
    "    correlations = {}\n",
    "    for column in float_columns:\n",
    "        if column != target_column:\n",
    "            corr, _ = pearsonr(df[column], df[target_column])\n",
    "            correlations[column] = corr\n",
    "    return correlations\n",
    "\n",
    "def spearman_correlation(df, target_column, float_columns):\n",
    "    correlations = {}\n",
    "    for column in float_columns:\n",
    "        if column != target_column:\n",
    "            corr, _ = spearmanr(df[column], df[target_column])\n",
    "            correlations[column] = corr\n",
    "    return correlations\n",
    "\n",
    "# 计算只针对浮点数列的相关性\n",
    "pearson_results = pearson_correlation(df, 'target', float_columns)\n",
    "spearman_results = spearman_correlation(df, 'target', float_columns)\n",
    "\n",
    "# 打印结果\n",
    "print(\"pearson_correlation:\", pearson_results)\n",
    "print(\"spearman_correlation:\", spearman_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1ef57d01-a36d-4a0f-a5e3-0a66b93e0fd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorted Pearson Correlation: [('ask_size', 0.012752139801386852), ('imbalance_size', 0.0010597508079042894), ('matched_size', 0.0006216808516379594), ('far_price', -0.0018037281170692225), ('near_price', -0.002115035448593967), ('bid_size', -0.017739631092372504), ('reference_price', -0.04473762032423138), ('bid_price', -0.04775542189749235), ('ask_price', -0.04838886498913048), ('wap', -0.056194051943220885)]\n",
      "Sorted Spearman Correlation: [('ask_size', 0.057489574839903836), ('matched_size', 0.0017232624948999111), ('imbalance_size', 0.0010833034541324852), ('far_price', -0.005374061289319017), ('near_price', -0.007609943577612957), ('reference_price', -0.03203920862358736), ('bid_price', -0.03414298133949177), ('ask_price', -0.03501851042029415), ('wap', -0.04282104755286715), ('bid_size', -0.05963073825519416)]\n"
     ]
    }
   ],
   "source": [
    "sorted_pearson = sorted(pearson_results.items(), key=lambda x: x[1], reverse=True)\n",
    "sorted_spearman = sorted(spearman_results.items(), key=lambda x: x[1], reverse=True)\n",
    "\n",
    "print(\"Sorted Pearson Correlation:\", sorted_pearson)\n",
    "print(\"Sorted Spearman Correlation:\", sorted_spearman)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d13c162f-d898-46da-9647-a85071bae776",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77380ad5-04e4-4250-a4a7-c3b33f9dfa0c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ac2b68a-83df-4eaf-9970-a2ed893d0a4a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
